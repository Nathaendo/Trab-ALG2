#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void preenche_vetor(int vetor[]){
    for(int i = 1;i <= 1024;i++)
        vetor[i] = rand()%2049;
}

int busca_bin(int vetor[],int ini,int fim,int *comp,int chave){
    if(ini>fim)
        return 0;                                 //não possui
    int meio = (ini+fim)/2;
    (*comp)++;
    if(vetor[meio] == chave)                              //achou
        return meio;
    if(vetor[meio] > chave){
        return busca_bin(vetor,ini,meio-1,comp,chave);   //pode estar na esq do vetor
    }
    return busca_bin(vetor,meio+1,fim,comp,chave);            //pode estar na dir do vetor
}

int particionar(int vetor[],int inicio,int fim, int*comp,int *trocas){
    int aux,idx_pivo;
    int pivo = vetor[fim];      //pivo igual ultimo elemento
    idx_pivo = inicio; 
    for(int i = inicio;i<fim;i++){
        (*comp)++;
        if(vetor[i]<=pivo){
            (*trocas)++;
            aux = vetor[i];
            vetor[i] = vetor[idx_pivo];
            vetor[idx_pivo] = aux;
            idx_pivo++;
        }
    }
    (*trocas)++;
    vetor[fim] = vetor[idx_pivo];       //alocar o pivo para a posilão correta
    vetor[idx_pivo] = pivo;
    return idx_pivo;   //posição do pivo
}
void quicksort(int vetor[],int ini,int fim,int *comp,int *trocas){
    if(ini < fim){
        int pospivo = particionar(vetor,ini,fim,comp,trocas);
        quicksort(vetor,ini,pospivo-1,comp,trocas); 
        quicksort(vetor,pospivo+1,fim,comp,trocas);
    }
}

int main(){
    srand(time(NULL));
    int vetor[1025];
    int dnt1,dnt2;
    preenche_vetor(vetor);
    int comp,chave = rand()%2049;
    quicksort(vetor,1,1024,&dnt1,&dnt2);           //vetor precisa estar ordenado
    printf("CHAVE: %d\n",chave);
    int resul = busca_bin(vetor,1,1024,&comp,chave);
    if(resul)
        printf("Está no index: %d\nComparações: %d\n", resul,comp);
    else
        printf("Não está no vetor\nComparações: %d\n",comp);
    return 0;
}