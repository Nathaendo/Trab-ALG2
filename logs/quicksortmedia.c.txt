#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void preenche_vetor(int vetor[]){
    for(int i = 1;i <= 1024;i++)
        vetor[i] = rand()%2049;
}
void imprime_vetor(int vetor[]){
    printf("100 primeiros elementos da lista:");
    for(int i = 1; i <= 100;i++){
        if(i==1)
            printf("[%d", vetor[i]);
        else if(i == 100)
            printf(" %d]", vetor[i]);
        else
            printf(" %d",vetor[i]);
    }
    printf("\n");
}
int particionar(int vetor[],int inicio,int fim, int*comp,int *trocas){
    int aux;
    int pivo = (vetor[inicio]+vetor[fim]+vetor[(inicio+fim)/2])/3;; //define pivô como uma media de três valores, esse valor não pertence
    while(inicio<fim){     //                                       // necessariamente ao vetor, é apenas para comparar e separar o vetor em dois.
        while(inicio < fim && vetor[inicio]<=pivo){ //procura por elemento maior que opivo no começo
            (*comp)++;
            inicio++;
        }
        while(inicio<fim && vetor[fim] > pivo){
            (*comp)++;
            fim--;
        }
        aux = vetor[inicio];
        vetor[inicio] = vetor[fim];
        vetor[fim] = aux;
        (*trocas)++;
    }
    return inicio;   //posição do "meio" da partição
}
void quicksort(int vetor[],int ini,int fim,int *comp,int *trocas){
    if(ini < fim){
        int posmeio = particionar(vetor,ini,fim,comp,trocas);
        quicksort(vetor,ini,posmeio-1,comp,trocas); 
        quicksort(vetor,posmeio,fim,comp,trocas);
    }
}


int main(){
    srand(time(NULL));
    int vetor[1025];
    int trocas,comp;
    trocas = comp = 0;
    preenche_vetor(vetor);
    printf("Vetor desordenado:\n");
    imprime_vetor(vetor);
    quicksort(vetor,1,1024,&comp,&trocas);
    printf("Vetor ordenado:\n");
    imprime_vetor(vetor);
    printf("comparações: %d\n", comp);
    printf("trocas: %d\n",trocas);
    return 0;
}